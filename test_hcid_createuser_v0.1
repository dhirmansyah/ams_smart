#!/usr/bin/python
import csv
import pandas as pd
import numpy as np
import time
import sys
import random
import scpclient
import md5
import subprocess
import os
import socket
import smtplib
from pandas import DataFrame
from sqlalchemy import create_engine

# create directory everyday + global variable
COS_LIST='/opt/ams_smart/var/cos_list.csv'
CATALOG='/opt/ams_smart/var/catalog.csv'
datenow=(time.strftime("%Y-%m-%d:%T"))
dirname=(time.strftime("%Y-%m-%d"))
OUT_ADEX='/SMART/CREATE/OUT/AD_STG/'
OUT_ADEX_FIX='/SMART/CREATE/OUT/AD_FIX/'
OUT_ZM='/SMART/CREATE/OUT/ZM_STG/'
OUT_DB='/SMART/CREATE/OUT/DB_IMPORT/'
ERR_INFO='/SMART/CREATE/OUT/VALIDATION/'
ARCHIVE_AD='/SMART/CREATE/ARCHIVE/AD/'
ARCHIVE_ZM='/SMART/CREATE/ARCHIVE/ZM/'
ARCHIVE_ZM_TODAY=ARCHIVE_ZM+dirname+'/'
filename=sys.argv[1]
ZM_SVR="id-vx120.prod.homecredit.id"


# -------------------- create folder every day
try :
	# create directory in each OUT path
	os.mkdir(OUT_ADEX+dirname)
except :
	print("Path Created")

try :
	# create directory in each OUT path
	os.mkdir(OUT_ZM+dirname)
except :
	print("Path Created")

try :
	# create directory in each OUT path
	os.mkdir(OUT_DB+dirname)
except :
	print("Path Created")

try :
	# create directory in each OUT path
	os.mkdir(ERR_INFO+dirname)
except :
	print("Path Created")

#try :
	# create directory in each OUT path
#	os.mkdir(OUT_ADEX_FIX+dirname)
#except :
#	print("Path Created")

try :
        # create directory in each OUT path
        os.mkdir(ARCHIVE_AD+dirname)
except :
        print("Path Created")

try :
        # create directory in each OUT path
        os.mkdir(ARCHIVE_ZM+dirname)
except :
        print("Path Created")




# FILE realtime
ADEX_FILE=OUT_ADEX + dirname+'/'+'adexchange-'+datenow+'.csv'
ZM_FILE=OUT_ZM + dirname+'/'+'adzimbra-'+datenow+'.csv'
IMPORT_DB_ZM=OUT_DB + dirname+'/'+'importdb-zm-'+datenow+'.csv'
IMPORT_DB_AD=OUT_DB + dirname+'/'+'importdb-ad-'+datenow+'.csv'
ACCOUNT_EXIST=ERR_INFO + dirname+'/'+'account_exist-'+datenow+'.csv'


#-- DB Engine
engine = create_engine("mysql://root:paganini@localhost/homecredit")


#dataframe database_check
query_check = "select nik,email from tbl_users"
source_db = pd.read_sql(query_check, engine)
source_db.columns=['EMP_NO','EMAIL']

#Global Column MANDATORY
df = pd.read_csv(filename, usecols=['EMP_NO','USERNAME','FIRST_NAME','LAST_NAME','EMAIL','AD','EXCHANGE','POSITION','CITY','SUPERVISOR','PASSWORD','WORK_LOCATION','COST_CENTER','MOBILE_PHONE','TICKET','POS_ID','EMPLOYEE_NAME','SAMACCOUNTNAME'], sep=None, engine='python')

# Index Catalog Distribution List file
dl_list = pd.read_csv(CATALOG,sep=',|;', engine='python').apply(lambda x: x.astype(str).str.lower())
# Convert Distribution List to lowercase
conv_dl_list = dl_list.applymap(lambda x: x.lower())

# ------------- parsing process (data who already exist will skip) --------------------------
### Validasi jika account sudah ada maka tidak di tampilkan 

#-- account exist
validation_account = df[(df.EMP_NO.isin(source_db.EMP_NO))]
validation_account.to_csv(ACCOUNT_EXIST,encoding='utf-8',sep=',', index = None, columns=['EMP_NO','EMPLOYEE_NAME','USERNAME','EMAIL','PASSWORD'])

# -- account not exist
df = df[(~df.EMP_NO.isin(source_db.EMP_NO))]

## Split email address to sAMAccountName and limit just 20 Char in there because of AD limitation
# Purpose 1 : split dari almat email dan di batasi 20 Char
#sAMAccountName_field = df.EMAIL.str.split("@").str[0].str.slice(0, 20).str.lower()
#df['sAMAccountName'] = sAMAccountName_field.str.slice(0, 20).str.lower()
#print(sAMAccountName_field)

# ------------- Modif Kolom AD  / remove special char-------------------------------------
# Purpose 2 : gabung dari FNAME(1 char) + LNAME

#sAMAccountName_fname = df.FIRST_NAME.str.slice(0, 1).str.lower().str.replace(",","").str.replace("-","").str.replace("\'","")
#sAMAccountName_lname = df.LAST_NAME.str.slice(0, 18).str.lower().str.replace(",","").str.replace("-","").str.replace("\'","")
#df['sAMAccountName'] = sAMAccountName_fname+'.'+sAMAccountName_lname
df['SAMACCOUNTNAME'] = df.SAMACCOUNTNAME.str.lower()
#----

df['FIRST_NAME'] = df.FIRST_NAME.str.replace(',','').str.replace("-","").str.replace("\'","")
df['LAST_NAME'] = df.LAST_NAME.str.replace('\,',"").str.replace("\-","").str.replace("\'","")
df['EMAIL'] = df.EMAIL.str.lower().str.replace(",","").str.replace("-","").str.replace("\'","")
df['USERNAME'] = df.USERNAME.str.lower().str.replace(",","").str.replace("-","").str.replace("\'","")
domain_field = df.EMAIL.str.split("@").str[1]
df['domain_name'] = domain_field
df['ad_feature'] = df.AD.str.lower()

#Add date Created column
date_field = datenow
df['date_created'] = date_field

#convert to lowercase for spesific column
df['POS_ID']=df['POS_ID'].str.lower()
df['CITY']=df['CITY'].str.lower()

#Add colom for insert to database by default value
df['status_employee']='0'
df['status_email']='0'
df['id_lync_stts_ftime']='0'
df['id_mobile_stts_ftime']='0'

#Add new column for zimbra mandatory
df['createAccount']='createAccount'
df['displayName']='displayName'
df['givenName']='givenName'
df['sn']='sn'
df['pager']='pager'
df['telephoneNumber']='telephoneNumber'
df['zimbraCOSid']='zimbraCOSid'
df['alias']='aaa'
df['adlm']='adlm'

#--
df['ZEMP_NO']="'"+df.EMP_NO.astype('str')+"'"
df['alias_domain']=df['USERNAME']+'@'+df['domain_name']
df['ZFIRST_NAME']="'"+df['FIRST_NAME']+"'"
df['ZLAST_NAME']="'"+df['LAST_NAME']+"'"
df['Zphone']="'"+df.MOBILE_PHONE.astype('str')+"'"

# DECIDE Field by feature and Position
AD_EXCHANGE = df.loc[(df.AD.str.lower() == 'y') & (df.EXCHANGE.str.lower() == 'y')]
AD_ZIMBRA = df.loc[(df.AD.str.lower() == 'y') & (df.EXCHANGE.str.lower() == 'n')]
zimbraonly = df.loc[(df.AD.str.lower() == 'n') & (df.EXCHANGE.str.lower() == 'n')]


# Khusus untuk Create Zimbra Join table antara AD_ZIMBRA dan zimbraonly
zm_create = AD_ZIMBRA.append(zimbraonly)


#---------- Join table 2 for zimbra DL------------------
zm_main = conv_dl_list.merge(zm_create, how = 'inner', on = ['POS_ID','CITY'])
ad_main = AD_ZIMBRA.append(AD_EXCHANGE)


#Main Table AD Format
tbl_adex=['EmployeeNo','FirstName','LastName','DisplayName','UserLogonName','JobTitle','City','Office','Department','EnableMailbox','Manager']

# Export to csv Untuk AD format dengan Exchange
CONV_AD_EXCHANGE = AD_EXCHANGE.astype('str').replace('\.0', '', regex=True)
CONV_AD_EXCHANGE.to_csv(ADEX_FILE, sep=',', encoding='utf-8', index = None, header=tbl_adex,columns=['EMP_NO','FIRST_NAME','LAST_NAME','EMPLOYEE_NAME','SAMACCOUNTNAME','POSITION','CITY','WORK_LOCATION','COST_CENTER','EXCHANGE','SUPERVISOR'])

# EXPORT TO CSV FOR untuk  AD_ONLY
CONV_AD_ONLY = AD_ZIMBRA.astype('str').replace('\.0', '', regex=True)
CONV_AD_ONLY.to_csv(ADEX_FILE, mode = 'a' ,sep=',', encoding='utf-8', index = None, header=None,columns=['EMP_NO','FIRST_NAME','LAST_NAME','EMPLOYEE_NAME','SAMACCOUNTNAME','POSITION','CITY','WORK_LOCATION','COST_CENTER','EXCHANGE','SUPERVISOR'])

# Read exchange file
exchangefile = pd.read_csv(ADEX_FILE)
#print (exchangefile)


# Replace and remove some char
CONV_ZM_AD = AD_ZIMBRA.astype('str').replace('\.0', '', regex=True)
CONV_ZM_ONLY = zimbraonly.astype('str').replace('\.0', '', regex=True)
CONV_ZM = zm_main.astype('str').replace('\.0', '', regex=True)

# FORMAT CREATE ZIMBRA
zmfile = open(ZM_FILE,'w+')
CONV_ZM.to_csv(ZM_FILE,encoding='utf-8',sep=' ', index = None, header=None,mode = 'a', columns=['createAccount','EMAIL','PASSWORD','displayName','EMPLOYEE_NAME','givenName','ZFIRST_NAME','sn','ZLAST_NAME','pager','ZEMP_NO','telephoneNumber','Zphone','zimbraCOSid','COS_ID'])

# ALIAS IN ZIMBRA
CONV_ZM.to_csv(ZM_FILE,encoding='utf-8',sep=' ', index = None, header=None, mode = 'a', columns=['alias','EMAIL','alias_domain'])

#ddress DL IN ZIMBR
zm_main.to_csv(ZM_FILE,encoding='utf-8',sep=' ', index = None, header=None, mode = 'a', columns=['adlm','dl_address','EMAIL'])

# ---------------- DB Segment ------------------------------
tbl_db=['nik','username','upn','password','f_name','l_name','d_name','email','position','department','office','status_employee','status_email','date_created','otrs_date_created','id_lync_stts','id_mobile_stts','mobile_phone','ad_feature']

#add domain @HCG.HOMECREDIT.NET
#df['sAMAccountName_db']=df.sAMAccountName+'@HCG.HOMECREDIT.NET'
df['sAMAccountName_db']=df.SAMACCOUNTNAME+'@hcg.homecredit.net'


# -------------------------------------------------------------------------------- PROCESS FILES, NOTIF AND INSERT DB ---------------------------------------------------------------------------

# -- Print and notif if data exis will send to email
if not validation_account.empty:
	print('\nFile Exist:\nPlease check email, there have some data who has been exist in Database\n')
	os.system("echo 'Hi Team, \n\nWe send you file Account who exist in Database and will not process to created. Please check it. \n\nThanks\n\n IT Servers '| mailx -v -r 'amsnew@homecredit.co.id' -s 'Notif Data Exist - AMS "+datenow+"' -a "+ACCOUNT_EXIST+" -S smtp=smtp1-int.id.prod doni.hirmansyah01@homecredit.co.id firmandha.noerdiansya@homecredit.co.id")
else:
	print('\nFile Exist:\nNo file exist, All data will process...\n')

#------------------------------------- INSERT DB AMS
#-- DB AD AMS 
if not ad_main.empty:
	ad_main.to_csv(IMPORT_DB_AD,encoding='utf-8',sep=',',index = None, quotechar='"', header=tbl_db,columns=['EMP_NO','USERNAME','sAMAccountName_db','PASSWORD','FIRST_NAME','LAST_NAME','EMPLOYEE_NAME','EMAIL','POSITION','COST_CENTER','WORK_LOCATION','status_employee','status_email','date_created','TICKET','id_lync_stts_ftime','id_mobile_stts_ftime','MOBILE_PHONE','ad_feature'])
	insertdb = pd.read_csv(IMPORT_DB_AD)
	insertdb.to_sql(con=engine, index=False, name='tbl_users', if_exists='append')
	print('\nInsert DB:\nImport DB Success......\n')
else:
	print('\nInsert DB:\nNo Import DB, because data is empty...\n')


#-- DB ZIMBRA DATA
if not CONV_ZM.empty:
	CONV_ZM.to_csv(IMPORT_DB_ZM,encoding='utf-8',sep=',',index = None, quotechar='"', header=tbl_db,columns=['EMP_NO','USERNAME','sAMAccountName_db','PASSWORD','FIRST_NAME','LAST_NAME','EMPLOYEE_NAME','EMAIL','POSITION','COST_CENTER','WORK_LOCATION','status_employee','status_email','date_created','TICKET','id_lync_stts_ftime','id_mobile_stts_ftime','MOBILE_PHONE','ad_feature'])
	insertdb = pd.read_csv(IMPORT_DB_ZM)
	insertdb.to_sql(con=engine, index=False, name='tbl_users', if_exists='append')
	print('\nInsert DB:\nImport DB Success......\n')
else:
	print('\nInsert DB:\nNo Import DB, because data is empty...\n')

# ------------------------------------- SEND TO SSH and Email for result file
with open(ZM_FILE) as zimbra_file:
	first = zimbra_file.read(1)
	if not first:
		print('\nZimbra Process:\nNot sending any Files, zimbra file is empty..\n')
	else:
		# send file zimbra to server zimbra - SSH
		os.system("rsync -avh " +ZM_FILE+ " zimbra@"+ZM_SVR+":/opt/zimbra/script_zimbra/smart_ams/run/create/")
		# archive file before remove 
		os.system("cp -rf " +ZM_FILE+" "+ARCHIVE_ZM_TODAY)
		# remove zimbra file 
		os.system("rm -rf "+ZM_FILE+ ";echo 'file "+ZM_FILE+" success and file aready removed..!'")
		print('\nZimbra Process:\nZimbra File already send to remote server\n')

# ----------- Notification to user


if not exchangefile.empty:
	print('\nAD and Exchange Process :\nExchange file process, Please check your Email.....\n')
	# -- send mail 
	os.system("echo 'Hi Team, \n\nWe send you file for creation AD account, please execute in poper systems. \n\nThanks\n\n IT Servers '| mailx -v -r 'smartams@homecredit.co.id' -s 'AD Creation file "+datenow+"' -a "+ADEX_FILE+" -S smtp=smtp1-int.id.prod doni.hirmansyah01@homecredit.co.id firmandha.noerdiansya@homecredit.co.id")

else:
	print ('\nAD and Exchange Process :\nExhcange file is empty, File Not Process....\n')


